{"version":3,"sources":["../index.js","demo.js"],"names":["defaultState","debug","Subscribers","Methods","fetch","key","rest","filter","sub","includes","listen","subscriber","match","find","push","console","warn","log","detach","index","findIndex","splice","State","Proxy","set","state","value","oldState","subscribers","forEach","count","countEl","document","querySelector","innerHTML","JSON","stringify","stateEl","newState","window","add","reset"],"mappings":"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","file":"demo.c9cb7aa2.js","sourceRoot":"../dev","sourcesContent":["/**\n * The main constructor.\n * \n * @param {object} defaultState The default state to start with.\n * @return {object} The store state. \n */\nexport default (defaultState = {}, debug = false) => {\n\n    /**\n     * Internal subscriber array.\n     * @var {array}\n     */\n    const Subscribers = []\n\n    /**\n    * Helper methods to interact with state and subscribers.\n    * @var {object}\n    */\n    const Methods = {\n        fetch: function(key, ...rest) {\n            return Subscribers.filter(sub => [key, ...rest].includes(sub.key))\n        },\n\n        listen: function (subscriber, key = 'all') {\n            const match = Subscribers.find(sub => key === sub.key)\n            if (!match) {\n                Subscribers.push({\n                    key,\n                    subscriber\n                })\n            }\n            \n            if ( match && debug ) {\n                console.warn(`There is already a listener active for the \\`${key}\\` prop!`)\n                console.log(match)\n            }\n        },\n\n        detach: function (key) {\n            const index = Subscribers.findIndex(sub => key === sub.key)\n            if (-1 < index) {\n                Subscribers.splice(index, 1)\n            }\n\n            return Subscribers\n        }\n    }\n\n    /**\n     * Initialize the proxy object with traps and default state\n     * @var {Proxy} \n     */\n    const State = new Proxy( defaultState, {\n        set(state, key, value) {\n            if (value === state[key]) {\n                return true\n            }\n\n            const oldState = { ...state }\n            state[key] = value\n\n            const subscribers = Methods.fetch(key, 'all')\n            subscribers && subscribers.forEach(({subscriber}) => subscriber(state, oldState))\n\n            return true\n        }\n    })\n\n    return {\n        state: State,\n        ...Methods\n    }\n}\n","import Store from \"../index\";\n\n/**\n * Initiate your global store with default state.\n */\nconst { state, listen, detach } = Store({\n  count: 5\n}, true );\n\n/**\n * Set up initial content.\n */\nconst countEl = document.querySelector(\"#count\");\ncountEl.innerHTML = JSON.stringify({count: 0});\nconst stateEl = document.querySelector(\"#state\");\nstateEl.innerHTML = JSON.stringify(state);\n\n/**\n * Global listener.\n */\nlisten(newState => stateEl.innerHTML = JSON.stringify(newState))\n\n/**\n * Methods to adjust the state.\n */\nwindow.add = () => state.count++;\nwindow.sub = () => state.count--;\n\n/**\n * Allow resetting of the DOM and state.\n */\nwindow.reset = () => {\n  state.count = 5;\n  countEl.innerHTML = JSON.stringify({count: 0})\n  detach('count')\n}\n\n/**\n * Opt-in listeners.\n */\nwindow.listen = () => {\n    countEl.innerHTML = JSON.stringify( state )\n    listen(newState => \n      countEl.innerHTML = JSON.stringify(newState),\n      'count'\n    )\n}\nwindow.detach = () => {\n    detach('count');\n}\n"]}