{"version":3,"sources":["../src/index.ts","demo.js"],"names":["count","state","listen","detach","countEl","document","querySelector","innerHTML","window","add","sub","newState"],"mappings":";AAsFA,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA3EA,IAAM,EAAkB,SAAS,QAAA,IAAA,IAAA,EAAA,IAKvB,IAAA,EAAgC,GAKhC,EAAuB,CACzB,MAAO,SAAS,GACL,OAAA,EAAY,KAAK,SAAA,GAAO,OAAA,IAAQ,EAAI,OAG/C,OAAQ,SAAU,EAAK,GASZ,OARmC,EAAY,KAAK,SAAA,GAAO,OAAA,IAAQ,EAAI,OAE1E,EAAY,KAAK,CACb,IAAG,EACH,UAAW,CAAC,KAIb,GAGX,OAAQ,SAAU,GACR,IAAA,EAAgB,EAAY,UAAU,SAAA,GAAO,OAAA,IAAQ,EAAI,MAKxD,OAJF,EAAI,GACL,EAAY,OAAO,EAAO,GAGvB,IAkCT,EAAQ,IAAI,MAAO,EA3BE,CACvB,IAAA,SAAI,EAAe,GACV,MAAA,QAAU,EACJ,EAGJ,EAAM,IAGjB,IAAA,SAAI,EAAe,EAAa,GACvB,GAAA,IAAU,EAAM,GACV,OAAA,EAGL,IAAA,EAAQ,EAAA,GAAO,GACrB,EAAM,GAAO,EAEP,IAAA,EAA6B,EAAQ,MAAM,GAG1C,OAFP,GAAc,EAAW,UAAU,QAAQ,SAAA,GAAc,OAAA,EAAW,EAAO,MAEpE,KASf,OAAA,EAAA,CACI,MAAO,GACJ,IAIX,QAAA,QAAe;;AC9Df,aAxBA,IAAA,EAAA,EAAA,QAAA,iBAwBA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAnBkC,IAAA,GAAA,EAAM,EAAA,SAAA,CACtCA,MAAO,IADDC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,OAOjBC,EAAUC,SAASC,cAAc,UACvCF,EAAQG,UAAYN,EAAMD,MAK1BQ,OAAOC,IAAM,WAAMR,OAAAA,EAAMD,SACzBQ,OAAOE,IAAM,WAAMT,OAAAA,EAAMD,SACzBQ,OAAON,OAAS,WACZE,EAAQG,UAAYN,EAAMD,MACXE,EAAO,QAAS,SAAAS,GAAaP,OAAAA,EAAQG,UAAYI,EAASX,SAE7EQ,OAAOL,OAAS,WACGA,EAAO","file":"demo.17689f64.js","sourceRoot":"../demo","sourcesContent":["import {\n    MethodsType,\n    ProxyType,\n    SubscriberType,\n    Store\n} from './interface'\n\n/**\n * The main constructor.\n * @param {Object} defaultState The default state to start with.\n */\nconst Store: Function = function(defaultState: Object = {}) {\n\n    /**\n     * Internal subscriber array.\n     */\n    const Subscribers: SubscriberType[] = []\n\n    /**\n    * Helper methods to interact with state and subscribers.\n    */\n    const Methods: MethodsType = {\n        fetch: function(key) {\n            return Subscribers.find(sub => key === sub.key)\n        },\n\n        listen: function (key, subscriber) {\n            const match: SubscriberType | undefined = Subscribers.find(sub => key === sub.key)\n            if (!match) {\n                Subscribers.push({\n                    key,\n                    callbacks: [subscriber]\n                })\n            }\n\n            return Subscribers\n        },\n\n        detach: function (key) {\n            const index: number = Subscribers.findIndex(sub => key === sub.key);\n            if (-1 < index) {\n                Subscribers.splice(index, 1)\n            }\n\n            return Subscribers\n        }\n    }\n\n    /**\n     * Proxy handler object.\n     */\n    const Handler: ProxyType = {\n        get(state: object, key: string) {\n            if ( 'all' === key ) {\n                return state;\n            }\n\n            return state[key]\n        },\n\n        set(state: object, key: string, value: any) {\n            if ( value === state[key] ) {\n                return true\n            }\n            \n            const oldState = {...state}\n            state[key] = value\n\n            const Subscriber: SubscriberType = Methods.fetch(key)\n            Subscriber && Subscriber.callbacks.forEach(subscriber => subscriber(state, oldState))\n\n            return true\n        }\n    }\n\n    /**\n     * The main Proxy to manage state with.\n     */\n    const State = new Proxy( defaultState, Handler );\n\n    return {\n        state: State,\n        ...Methods\n    }\n}\n\nexport default Store\n","import Store from \"../src/index\";\n\n/**\n * Initiate your global store with default state.\n */\nconst { state, listen, detach } = Store({\n  count: 0\n});\n\n/**\n * Set up initial content.\n */\nconst countEl = document.querySelector(\"#count\");\ncountEl.innerHTML = state.count;\n\n/**\n * Methods to adjust the state.\n */\nwindow.add = () => state.count++;\nwindow.sub = () => state.count--;\nwindow.listen = () => {\n    countEl.innerHTML = state.count\n    const result = listen('count', newState => (countEl.innerHTML = newState.count))\n}\nwindow.detach = () => {\n    const result = detach('count');\n}\n"]}