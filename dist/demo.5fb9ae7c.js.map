{"version":3,"sources":["../index.ts","demo.js"],"names":["MyStore","total","active","state","addSubscriber","window","increase","decrease","red","grey","count","document","querySelector","boxes","querySelectorAll","newState","oldState","textContent","console","log","all","forEach","box","classList","add","remove"],"mappings":";AA6DA,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAnDA,IAAM,EAAkB,SAAS,QAAA,IAAA,IAAA,EAAA,IAKvB,IAAA,EAA0B,GA6B1B,EAAwB,CAC1B,cAAe,SAAS,GACpB,EAAY,KAAK,KAOnB,EAAQ,IAAI,MAAO,EAjCI,CACzB,IAAA,SAAI,EAAe,EAAa,GACvB,MAAA,QAAU,EACJ,EAGJ,EAAM,IAGjB,IAAA,SAAI,EAAe,EAAa,GACvB,GAAA,IAAU,EAAM,GACV,OAAA,EAGL,IAAA,EAAQ,EAAA,GAAO,GAGd,OAFP,EAAM,GAAO,EACb,EAAY,QAAQ,SAAA,GAAM,OAAA,EAAG,EAAO,MAC7B,KAkBf,OAAA,EAAA,CACI,MAAO,GACJ,IAIX,QAAA,QAAe;;ACtCf,aAvBA,IAAA,EAAA,EAAA,QAAA,aAuBA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GArBA,IAAMA,GAAU,EAAM,EAAA,SAAA,CAClBC,MAAO,EACPC,QAAQ,IAGJC,EAAyBH,EAAzBG,MAAOC,EAAkBJ,EAAlBI,cAGfC,OAAOC,SAAW,WAAMH,OAAAA,EAAMF,SAC9BI,OAAOE,SAAW,WAAMJ,OAAAA,EAAMF,SAC9BI,OAAOG,IAAM,WAAML,OAAAA,EAAMD,QAAS,GAClCG,OAAOI,KAAO,WAAMN,OAAAA,EAAMD,QAAS,GAEnC,IAAMQ,EAAQC,SAASC,cAAc,UAC/BC,EAAQF,SAASG,iBAAiB,QAExCV,EAAc,SAACW,EAAUC,GACrBN,EAAMO,YAAcF,EAASd,MAC7BiB,QAAQC,IAAKhB,EAAMiB,OAGvBhB,EAAc,SAACW,EAAUC,GACrBH,EAAMQ,QAAS,SAAAC,GAAOP,OAAAA,EAASb,OACzBoB,EAAIC,UAAUC,IAAI,UAClBF,EAAIC,UAAUE,OAAO","file":"demo.5fb9ae7c.js","sourceRoot":"../demo","sourcesContent":["import {\n    ProxyMethods,\n    ProxySchema,\n    Store\n} from './interface'\n\n/**\n * The main constructor.\n * @param {Object} defaultState The default state to start with.\n */\nconst Store: Function = function(defaultState: Object = {}) {\n\n    /**\n     * Internal subscriber array.\n     */\n    const Subscribers: Function[] = []\n\n    /**\n     * Proxy handler object.\n     */\n    const Handler: ProxySchema = {\n        get(state: object, key: string, receiver) {\n            if ( 'all' === key ) {\n                return state;\n            }\n\n            return state[key]\n        },\n\n        set(state: object, key: string, value: any) {\n            if ( value === state[key] ) {\n                return true\n            }\n            \n            const oldState = {...state}\n            state[key] = value\n            Subscribers.forEach(cb => cb(state, oldState))\n            return true\n        }\n    }\n\n    /**\n     * Helper methods to interact with state and subscribers.\n     */\n    const Methods: ProxyMethods = {\n        addSubscriber: function(subscriber: Function) {\n            Subscribers.push(subscriber)\n        }\n    }\n\n    /**\n     * The main Proxy to manage state with.\n     */\n    const State = new Proxy( defaultState, Handler );\n\n    return {\n        state: State,\n        ...Methods\n    }\n}\n\nexport default Store\n","import Store from '../index'\n\nconst MyStore = Store({\n    total: 0,\n    active: false\n});\n\nconst { state, addSubscriber } = MyStore\n\n// Expose for demo.\nwindow.increase = () => state.total++\nwindow.decrease = () => state.total--\nwindow.red = () => state.active = true\nwindow.grey = () => state.active = false\n\nconst count = document.querySelector('#count')\nconst boxes = document.querySelectorAll('.box')\n\naddSubscriber((newState, oldState) => {\n    count.textContent = newState.total\n    console.log( state.all )\n})\n\naddSubscriber((newState, oldState) => {\n    boxes.forEach( box => newState.active\n        ? box.classList.add('active')\n        : box.classList.remove('active')\n    )\n})"]}